#!/usr/bin/env ruby

require_relative "../lib/podcast_buddy"
require "optparse"
require "rainbow"
require "timeout"
require "fileutils"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: podcast_buddy [options]"

  opts.on("--debug", "Run in debug mode") do |v|
    options[:debug] = v
  end

  opts.on("-w", "--whisper MODEL", "Use specific whisper model (default: small.en)") do |v|
    options[:whisper_model] = v
  end

  opts.on("-n", "--name NAME", "A name for the session to label all log files") do |v|
    options[:name] = v
  end
end.parse!

def to_human(text, label = :info)
  case label.to_sym
  when :info
    Rainbow(text).blue
  when :wait
    Rainbow(text).yellow
  when :input
    Rainbow(text).black.bg(:yellow)
  when :success
    Rainbow(text).green
  else
    text
  end
end

PodcastBuddy.logger.formatter = proc do |severity, datetime, progname, msg|
  if severity.to_s == "INFO"
    "#{msg}\n"
  else
    "[#{severity}] #{msg}\n"
  end
end

if options[:debug]
  PodcastBuddy.logger.info to_human("Turning on debug mode...", :info)
  PodcastBuddy.logger.level = Logger::DEBUG
else
  PodcastBuddy.logger.level = Logger::INFO
end

if options[:whisper_model]
  PodcastBuddy.whisper_model = options[:whisper_model]
  PodcastBuddy.logger.info to_human("Using whisper model: #{options[:whisper_model]}", :info)
end

if options[:name]
  base_path = "#{PodcastBuddy.root}/tmp/#{options[:name]}"
  FileUtils.mkdir_p base_path
  PodcastBuddy.session = options[:name]
  PodcastBuddy.logger.info to_human("Using custom session name: #{options[:name]}", :info)
  PodcastBuddy.logger.info to_human("  Saving files to: #{PodcastBuddy.session}", :info)
end

PodcastBuddy.logger.info "Setting up dependencies..."
PodcastBuddy.setup
PodcastBuddy.logger.info "Setup complete."

# OpenAI API client setup
# Raises error if no OPENAI_ACCESS_TOKEN env is set
PodcastBuddy.openai_client

# Initialize variables
@transcriber = PodcastBuddy::Transcriber.new
@shutdown = false

TOPIC_EXTRACTION_SYSTEM_PROMPT = <<~PROMPT.freeze
  As a podcast assistant, your task is to diligently extract topics related to the discussion on the show and prepare this information in an optimal way for participants to ask questions and for use in the closing show notes.

  To achieve this, follow these steps:

  1. Listen to the podcast discussion and identify the main topics covered.
  2. For each main topic, provide a brief summary of what was discussed.
  3. Generate 2-3 questions that participants can ask to delve deeper into each topic.
  4. Organize the information in a structured format that can be used in the closing Show Notes.

  Example Structure:
  - **Topic 1**: Summary of Topic 1
    * Question 1
    * Question 2
    * Question 3 (if applicable)
  - **Topic 2**: Summary of Topic 2
    * Question 1
    * Question 2
    * Question 3 (if applicable)
  - **Topic 3**: Summary of Topic 3
    * Question 1
    * Question 2
    * Question 3 (if applicable)
PROMPT
TOPIC_EXTRACTION_USER_PROMPT = <<~PROMPT.freeze
  Here is a snippet from the podcast discussion for you to analyze:
  """
  %{discussion}
  """

  Please extract the topics following the structure above.
PROMPT

DISCUSSION_PROMPT = <<~PROMPT.freeze
  As a kind and helpful podcast assistant, your task is to keep track of the overall discussion on the show. Additionally, you must be ready to provide a concise summary of the ongoing discussion at any moment and actively participate if required.

  To achieve this, follow these guidelines:
  1. Listen carefully to the podcast or read the provided transcript.
  2. Take note of key points, arguments, discussions, and any action items mentioned.
  3. Summarize the main points in a few sentences.
  4. Be prepared to elaborate on any part of the discussion or provide insights when asked.

  Here's how we can get started:
  1. Please provide a brief summary of the latest segment:
  """
  %{summary}
  """

  2. Wait for further instructions or questions from the host.

  Let's start with the first segment:
PROMPT

DISCUSSION_USER_PROMPT = <<~PROMPT.freeze
  Segment:
  """
  %{discussion}
  """
PROMPT

# Method to extract topics and summarize
def extract_topics_and_summarize(text)
  Sync do |parent|
    parent.async { update_topics(text) }
    parent.async { think_about(text) }
  end
end

def update_topics(text)
  Sync do
    PodcastBuddy.logger.debug "Looking for topics related to: #{text}"
    PodcastBuddy.logger.debug "System: #{TOPIC_EXTRACTION_SYSTEM_PROMPT}\n\tUser: #{format(TOPIC_EXTRACTION_USER_PROMPT, {discussion: text})}"
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o-mini",
      messages: [
        {role: "system", content: TOPIC_EXTRACTION_SYSTEM_PROMPT},
        {role: "user", content: format(TOPIC_EXTRACTION_USER_PROMPT, {discussion: text})}
      ],
      max_tokens: 500
    })
    new_topics = response.dig("choices", 0, "message", "content").gsub("NONE", "").strip
    PodcastBuddy.logger.debug "Updating topics: #{new_topics}"

    PodcastBuddy.announce_topics(new_topics)
    PodcastBuddy.add_to_topics(new_topics)
  end
end

def think_about(text)
  Sync do
    PodcastBuddy.logger.debug "Summarizing current discussion:\n\tCurrent: #{PodcastBuddy.current_summary}\n\tLatest: #{text}\n\tSystem: #{format(DISCUSSION_PROMPT, {summary: PodcastBuddy.current_summary})}\n\tUser: #{format(DISCUSSION_USER_PROMPT, {discussion: text})}"
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o",
      messages: [
        {role: "system", content: format(DISCUSSION_PROMPT, {summary: PodcastBuddy.current_summary})},
        {role: "user", content: format(DISCUSSION_USER_PROMPT, {discussion: text})}
      ],
      max_tokens: 250
    })
    new_summary = response.dig("choices", 0, "message", "content").strip
    PodcastBuddy.logger.info to_human("Thoughts: #{new_summary}", :info)
    PodcastBuddy.update_summary(new_summary)
  end
end

def answer_question(question)
  Async do
    summarize_latest if PodcastBuddy.current_summary.to_s.empty?
    latest_context = "#{PodcastBuddy.current_summary}\nTopics discussed recently:\n---\n#{PodcastBuddy.current_topics.split("\n").last(10)}\n---\n"
    previous_discussion = @transcriber.latest(1_000)
    PodcastBuddy.logger.info "Answering question:\n#{question}"
    PodcastBuddy.logger.debug "Context:\n---#{latest_context}\n---\nPrevious discussion:\n---#{previous_discussion}\n---\nAnswering question:\n---#{question}\n---"
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o-mini",
      messages: [
        {role: "system", content: format(DISCUSSION_PROMPT, {summary: PodcastBuddy.current_summary})},
        {role: "user", content: question}
      ],
      max_tokens: 150
    })
    answer = response.dig("choices", 0, "message", "content").strip
    PodcastBuddy.logger.debug "Answer: #{answer}"
    text_to_speech(answer)
    PodcastBuddy.logger.debug("Answer converted to speech: #{PodcastBuddy.answer_audio_file_path}")
    play_answer
  end
end

# Method to convert text to speech
def text_to_speech(text)
  response = PodcastBuddy.openai_client.audio.speech(parameters: {
    model: "tts-1",
    input: text,
    voice: "onyx",
    response_format: "mp3",
    speed: 1.0
  })
  File.binwrite(PodcastBuddy.answer_audio_file_path, response)
end

def play_answer
  PodcastBuddy.logger.debug("Playing answer...")
  system("afplay #{PodcastBuddy.answer_audio_file_path}")
end

# Method to generate show notes
def generate_show_notes
  return if PodcastBuddy.current_transcript.strip.empty?

  response = PodcastBuddy.openai_client.chat(parameters: {
    model: "gpt-4o",
    messages: [
      {role: "system", content: "You are a kind and helpful podcast assistant helping to take notes for the show, and extract useful information being discussed for listeners."},
      {role: "user", content: "Transcript:\n---\n#{PodcastBuddy.current_transcript}\n---\n\nTopics:\n---\n#{PodcastBuddy.current_topics}\n---\n\nUse the above transcript and topics to create Show Notes in markdown that outline the discussion.  Extract a breif summary that describes the overall conversation, the people involved and their roles, and sentiment of the topics discussed.  Follow the summary with a list of helpful links to any libraries, products, or other resources related to the discussion. Cite sources."}
    ]
  })
  show_notes = response.dig("choices", 0, "message", "content").strip
  File.open(PodcastBuddy.show_notes_file, "w") do |file|
    file.puts show_notes
  end

  PodcastBuddy.logger.info to_human("Show notes saved to: #{PodcastBuddy.show_notes_file}", :success)
end

# Periodically summarize latest transcription
def periodic_summarization(listener, interval = 15)
  Sync do
    loop do
      PodcastBuddy.logger.debug("Shutdown: periodic_summarization...") and break if @shutdown

      sleep interval
      summarize_latest(listener)
    rescue => e
      PodcastBuddy.logger.warn "[summarization] periodic summarization failed: #{e.message}"
    end
  end
end

def summarize_latest(listener)
  # cache it in case a subsequent audio transcript overlaps the processing here
  current_discussion = listener.current_discussion
  return if current_discussion.empty?

  PodcastBuddy.logger.debug "[periodic summarization] Latest transcript: #{current_discussion}"
  extract_topics_and_summarize(current_discussion)
end

def wait_for_question_end(listener)
  Sync do |parent|
    loop do
      PodcastBuddy.logger.debug("Shutdown: wait_for_question_end...") and break if @shutdown

      # The wait_for_question_start will signal this
      sleep 0.1 and next if !listener.listening_for_question

      input = ""
      Timeout.timeout(5) do
        input = gets
        PodcastBuddy.logger.debug("Input received...") if input.include?("\n")
        next unless input.to_s.include?("\n")
      rescue Timeout::Error
        # Let the loop continue so that it can catch @shutdown periodically, or
        # capture the signal
        PodcastBuddy.logger.debug("Input timeout...")
        next
      end

      if input.empty?
        next
      else
        PodcastBuddy.logger.info "End of question signal.  Generating answer..."
        question = listener.stop_listening_for_question!
        answer_question(question).wait
        PodcastBuddy.logger.info Rainbow("Press ").blue + Rainbow("Enter").black.bg(:yellow) + Rainbow(" to signal a question start...").blue
        break
      end
    end
  end
end

def wait_for_question_start(listener)
  Sync do |parent|
    PodcastBuddy.logger.info Rainbow("Press ").blue + Rainbow("Enter").black.bg(:yellow) + Rainbow(" to signal a question start...").blue
    loop do
      PodcastBuddy.logger.debug("Shutdown: wait_for_question...") and break if @shutdown

      input = ""
      Timeout.timeout(5) do
        input = gets
        PodcastBuddy.logger.debug("Input received...") if input.include?("\n")
        listener.listen_for_question! if input.include?("\n")
      rescue Timeout::Error
        # Let the loop continue so that it can catch @shutdown periodically, or
        # capture the signal
        next
      end

      next unless listener.listening_for_question

      PodcastBuddy.logger.info to_human("🎙️ Listening for quesiton. Press ", :wait) + to_human("Enter", :input) + to_human(" to signal the end of the question...", :wait)
      wait_for_question_end(listener)
    end
  end
end

# Handle Ctrl-C to generate show notes
Signal.trap("INT") do
  puts to_human("\nShutting down streams...", :wait)
  @shutdown = true
end

# Start audio stream processing
Async do |task|
  listener = PodcastBuddy::Listener.new(transcriber: @transcriber)
  listener_task = task.async { listener.start }
  periodic_summarization_task = task.async { periodic_summarization(listener) }
  question_listener_task = task.async { wait_for_question_start(listener) }

  # Allow recording up to 2 hours, but hard-timeout so that we don't become
  # zombies.
  task.with_timeout(60 * 60 * 2) do
    # Wait for shutdown sub-tasks to complete
    task.yield until @shutdown
  end

  PodcastBuddy.logger.info to_human("Waiting for Listener to shutdown...", :wait)
  listener.stop
  listener_task.wait
  PodcastBuddy.logger.info to_human("Waiting for question listening task shutdown...", :wait)
  question_listener_task.wait
  PodcastBuddy.logger.info to_human("Waiting for periodic summarization task to shutdown...", :wait)
  periodic_summarization_task.wait

  PodcastBuddy.logger.info to_human("Generating show notes...", :wait)
  generate_show_notes
end
