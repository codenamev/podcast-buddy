#!/usr/bin/env ruby

require_relative "../lib/podcast_buddy"
require "optparse"
require "rainbow"
require "timeout"
require "fileutils"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: podcast-buddy [options]"

  opts.on("--debug", "Run in debug mode") do |v|
    options[:debug] = v
  end

  opts.on("-n", "--name NAME", "A name for the session to label all log files") do |v|
    options[:name] = v
  end
end.parse!

def to_human(text, label = :info)
  case label.to_sym
  when :info
    Rainbow(text).blue
  when :wait
    Rainbow(text).yellow
  when :input
    Rainbow(text).black.bg(:yellow)
  when :success
    Rainbow(text).green
  else
    text
  end
end

PodcastBuddy.logger.formatter = proc do |severity, datetime, progname, msg|
  if severity.to_s == "INFO"
    "#{msg}\n"
  else
    "[#{severity}] #{msg}\n"
  end
end

if options[:debug]
  PodcastBuddy.logger.info to_human("Turning on debug mode...", :info)
  PodcastBuddy.logger.level = Logger::DEBUG
else
  PodcastBuddy.logger.level = Logger::INFO
end

if options[:name]
  base_path = "#{PodcastBuddy.root}/tmp/#{options[:name]}"
  FileUtils.mkdir_p base_path
  PodcastBuddy.session = options[:name]
  PodcastBuddy.logger.info to_human("Using custom session name: #{options[:name]}", :info)
  PodcastBuddy.logger.info to_human("  Saving files to: #{PodcastBuddy.session}", :info)
end

PodcastBuddy.logger.info "Setting up dependencies..."
PodcastBuddy.setup
PodcastBuddy.logger.info "Setup complete."

# OpenAI API client setup
# Raises error if no OPENAI_ACCESS_TOKEN env is set
PodcastBuddy.openai_client

# Initialize variables
@latest_transcription = ""
@full_transcript = ""
@listening_for_question = false
@shutdown = false
@threads = []
@transcription_queue = Queue.new
@question_transcript = Queue.new

# Method to extract topics and summarize
def extract_topics_and_summarize(text)
  Sync do |parent|
    parent.async { update_topics(text) }
    parent.async { update_summary(text) }
  end
end

def update_topics(text)
  Sync do
    PodcastBuddy.logger.debug "Looking for topics related to: #{text}"
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o",
      messages: [
        {role: "system", content: "You are a kind and helpful podcast assistant diligantly extracting topics related to the discussion on the show. Your goal is to prepare this information in an optimal way for participants to ask questions in the context of what is being discussed, and optimally for use in the closing Show Notes."},
        {role: "user", content: "Extract topics for the following Discussion:\n---\n#{text}\n---\n\nExclude any of these topics that have been previously discussed:\n---\n#{PodcastBuddy.current_topics}\n---\n\nIf there are no new topics to add, return NONE."}
      ],
      max_tokens: 250
    })
    new_topics = response.dig("choices", 0, "message", "content").gsub("NONE", "").strip
    PodcastBuddy.logger.debug "Updating topics: #{new_topics.split("\n").join(", ")}"
    PodcastBuddy.add_to_topics(new_topics)
  end
end

def update_summary(text)
  Sync do
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o",
      messages: [
        {role: "system", content: "You are a kind and helpful podcast assistant diligantly keeping track of the overall discussion on the show. Your goal is to prepare a concise summary of the overall discussion."},
        {role: "user", content: "Previous Summary:\n---\n#{PodcastBuddy.current_summary}\n---\n\nLatest Discussion:\n---\n#{text}\n---"},
        {role: "user", content: "Use the Previous Summary, and Latest Discussion, to combine into a single cohesive summary.\nSummary: "}
      ],
      max_tokens: 250
    })
    new_summary = response.dig("choices", 0, "message", "content").strip
    PodcastBuddy.logger.debug "Updating summary: #{new_summary}"
    PodcastBuddy.update_summary(new_summary)
  end
end

def answer_question
  Async do
    latest_context = "#{PodcastBuddy.current_summary}\nTopics discussed recently:\n---\n#{PodcastBuddy.current_topics.split("\n").last(10)}\n---\n"
    previous_discussion = @full_transcript.split("\n").last(25)
    question = ""
    question << @question_transcript.pop until @question_transcript.empty?
    PodcastBuddy.logger.info "Answering question:\n#{question}"
    PodcastBuddy.logger.debug "Context:\n---#{latest_context}\n---\nPrevious discussion:\n---#{previous_discussion}\n---\nAnswering question:\n---#{question}\n---"
    response = PodcastBuddy.openai_client.chat(parameters: {
      model: "gpt-4o",
      messages: [
        {role: "system", content: "You are a kind and helpful podcast assistant helping to answer questions as they come up during a recording. Keep the answer succinct and without speculation. Be playful, witty, and kind.  If a question is not asked try to add to the conversation as it best relates to the current discussion. Remember, this is a live recording, so there's no need to analyze and report on what is being asked."},
        {role: "user", content: "Context:\n#{latest_context}\n\nPrevious Discussion:\n#{previous_discussion}\n\nQuestion:\n#{question}\n\nAnswer:"}
      ],
      max_tokens: 150
    })
    answer = response.dig("choices", 0, "message", "content").strip
    PodcastBuddy.logger.debug "Answer: #{answer}"
    text_to_speech(answer)
    PodcastBuddy.logger.debug("Answer converted to speech: #{PodcastBuddy.answer_audio_file_path}")
    play_answer
  end
end

# Method to convert text to speech
def text_to_speech(text)
  response = PodcastBuddy.openai_client.audio.speech(parameters: {
    model: "tts-1",
    input: text,
    voice: "onyx",
    response_format: "mp3",
    speed: 1.0
  })
  File.binwrite(PodcastBuddy.answer_audio_file_path, response)
end

def play_answer
  PodcastBuddy.logger.debug("Playing answer...")
  system("afplay #{PodcastBuddy.answer_audio_file_path}")
end

# Method to handle audio stream processing
def process_audio_stream
  Sync do |parent|
    PodcastBuddy.logger.info "Buffering audio..."
    Open3.popen3(PodcastBuddy.whisper_command) do |stdin, stdout, stderr, _thread|
      error_log_task = parent.async { stderr.each { |line| PodcastBuddy.whisper_logger.error line } }
      output_log_task = parent.async { stdout.each { |line| PodcastBuddy.whisper_logger.debug line } }

      while (transcription = stdout.gets)
        PodcastBuddy.logger.debug("Shutdown: process_audio_stream...") and break if @shutdown
        PodcastBuddy.logger.debug("Still listening...")

        last_transcription_task = parent.async { process_transcription(transcription) }
      end

      error_log_task.wait
      output_log_task.wait
      last_transcription_task.wait
    end
  end
end

def process_transcription(line)
  # Cleanup captured text from whisper
  transcription_text = (line.scan(/\[[0-9]+.*[0-9]+\]\s?(.*)\n/) || [p])[0].to_s
  PodcastBuddy.logger.debug "Received transcription: #{transcription_text}" if transcription_text
  transcription_text = transcription_text.gsub("[BLANK_AUDIO]", "")
  transcription_text = transcription_text.gsub(/\A\["\s?/, "")
  transcription_text = transcription_text.gsub(/"\]\Z/, "")

  return if transcription_text.to_s.strip.squeeze.empty?

  @full_transcript += transcription_text

  if @listening_for_question
    PodcastBuddy.logger.info "Heard Question: #{transcription_text}"
    @question_transcript << transcription_text
  else
    PodcastBuddy.logger.info "Heard: #{transcription_text}"
    PodcastBuddy.update_transcript(transcription_text)
    @transcription_queue << transcription_text
  end
end

# Method to generate show notes
def generate_show_notes
  return if PodcastBuddy.current_transcript.strip.squeeze.empty?

  PodcastBuddy.logger.info "Generting show notes..."
  response = PodcastBuddy.openai_client.chat(parameters: {
    model: "gpt-4o",
    messages: [
      {role: "system", content: "You are a kind and helpful podcast assistant helping to take notes for the show, and extract useful information being discussed for listeners."},
      {role: "user", content: "Transcript:\n---\n#{PodcastBuddy.current_transcript}\n---\n\nTopics:\n---\n#{PodcastBuddy.current_topics}\n---\n\nUse the above transcript and topics to create Show Notes in markdown that outline the discussion.  Extract a breif summary that describes the overall conversation, the people involved and their roles, and sentiment of the topics discussed.  Follow the summary with a list of helpful links to any libraries, products, or other resources related to the discussion." }
    ],
    max_tokens: 150
  })
  show_notes = response.dig("choices", 0, "message", "content").strip
  File.open(PodcastBuddy.show_notes_file, "w") do |file|
    file.puts show_notes
  end

  PodcastBuddy.logger.info to_human("Show notes saved to: #{PodcastBuddy.show_notes_file}", :success)
end

# Periodically summarize latest transcription
def periodic_summarization(interval = 15)
  Sync do
    loop do
      PodcastBuddy.logger.debug("Shutdown: periodic_summarization...") and break if @shutdown

      sleep interval
      summarize_latest
    rescue => e
      PodcastBuddy.logger.warn "[summarization] periodic summarization failed: #{e.message}"
    end
  end
end

def summarize_latest
  latest_transcriptions = []
  latest_transcriptions << @transcription_queue.pop until @transcription_queue.empty?
  return if latest_transcriptions.join.strip.squeeze.empty?

  PodcastBuddy.logger.debug "[periodic summarization] Latest transcript: #{latest_transcriptions.join}"
  extract_topics_and_summarize(latest_transcriptions.join)
end

def wait_for_question_end
  Sync do |parent|
    loop do
      PodcastBuddy.logger.debug("Shutdown: wait_for_question_end...") and break if @shutdown

      # The wait_for_question_start will signal this
      sleep 0.1 and next if !@listening_for_question

      input = ""
      Timeout.timeout(5) do
        input = gets
        PodcastBuddy.logger.debug("Input received...") if input.include?("\n")
        next unless input.to_s.include?("\n")
      rescue Timeout::Error
        # Let the loop continue so that it can catch @shutdown periodically, or
        # capture the signal
        PodcastBuddy.logger.debug("Input timeout...")
        next
      end

      if input.empty?
        next
      else
        PodcastBuddy.logger.info "End of question signal.  Generating answer..."
        @listening_for_question = false
        answer_question.wait
        PodcastBuddy.logger.info Rainbow("Press ").blue + Rainbow("Enter").black.bg(:yellow) + Rainbow(" to signal a question start...").blue
        break
      end
    end
  end
end

def wait_for_question_start
  Sync do |parent|
    PodcastBuddy.logger.info Rainbow("Press ").blue + Rainbow("Enter").black.bg(:yellow) + Rainbow(" to signal a question start...").blue
    loop do
      PodcastBuddy.logger.debug("Shutdown: wait_for_question...") and break if @shutdown

      PodcastBuddy.logger.debug("Waiting for input...")
      input = ""
      Timeout.timeout(5) do
        input = gets
        PodcastBuddy.logger.debug("Input received...") if input.include?("\n")
        @question_transcript.clear
        @listening_for_question = true if input.include?("\n")
      rescue Timeout::Error
        # Let the loop continue so that it can catch @shutdown periodically, or
        # capture the signal
        next
      end

      next unless @listening_for_question

      PodcastBuddy.logger.info to_human("🎙️ Listening for quesiton. Press ", :wait) + to_human("Enter", :input) + to_human(" to signal the end of the question...", :wait)
      wait_for_question_end
    end
  end
end


# Handle Ctrl-C to generate show notes
Signal.trap("INT") do
  puts to_human("\nShutting down streams...", :wait)
  @shutdown = true
end

# Start audio stream processing
Async do |task|
  audio_input_task = task.async { process_audio_stream }
  periodic_summarization_task = task.async { periodic_summarization(60) }
  question_listener_task = task.async { wait_for_question_start }

  # Allow recording up to 2 hours, but hard-timeout so that we don't become
  # zombies.
  task.with_timeout(60*60*2) do
    # Wait for shutdown sub-tasks to complete
    task.yield until @shutdown
  end

  PodcastBuddy.logger.info "Waiting for all tasks to complete before exiting..."
  audio_input_task.wait
  PodcastBuddy.logger.debug "Audio input task complete."
  question_listener_task.wait
  PodcastBuddy.logger.debug "Question listener task complete."
  periodic_summarization_task.wait
  PodcastBuddy.logger.debug "Periodic Summarization task complete."

  generate_show_notes
end
